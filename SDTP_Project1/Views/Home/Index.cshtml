@using Newtonsoft.Json
@model IEnumerable<SDTP_Project1.Models.SensorDataViewModel>

@{
    ViewData["Title"] = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
    // Order the sensors by descending LatestAQI
    var orderedSensors = Model.OrderByDescending(s => s.LatestAQI);
}

<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="col-md-auto p-0" style="width: 400px;">
            <!-- Left Column: Cards container -->
            <div class="bg-light overflow-auto p-3 border-end">
                @foreach (var sensor in orderedSensors)
                {
                    <div class="card mb-3 shadow-sm border">
                        <div class="card-body">
                            <h5 class="card-title">@sensor.City</h5> <p class="card-text mb-1"> <strong>Latest AQI:</strong> @sensor.LatestAQI </p>
                            <p class="card-text">
                                <small class="text-muted"> <strong>Total Readings:</strong> @sensor.Readings.Count </small>
                            </p>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col vw-100 vh-100">
            <div  id="map" style="width:100%; height:100%;"></div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Load Leaflet CSS and JS from CDN -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <!-- Load Chart.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Reference external home.js for map initialization -->
    <script src="~/js/home.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Pass sensor-level aggregated data including readings to JavaScript.
            var sensorLocations = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
            Model.Select(s => new
            {
                s.City,
                s.Latitude,
                s.Longitude,
                AQI = s.LatestAQI,
                Readings = s.Readings.Select(r => new
                {
                    Timestamp = r.Timestamp.ToString("g"),
                    r.PM2_5,
                    r.PM10,
                    r.O3,
                    r.NO2,
                    r.SO2,
                    r.CO,
                    r.AQI
                })
            })
        ));
            initMap(sensorLocations);
        });
    </script>
}
