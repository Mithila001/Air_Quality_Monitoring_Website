// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SDTP_Project1.Data;

#nullable disable

namespace SDTP_Project1.Migrations
{
    [DbContext(typeof(AirQualityDbContext))]
    [Migration("20250331110018_FixAlertThresholdSettingPK")]
    partial class FixAlertThresholdSettingPK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SDTP_Project1.Models.AirQualityData", b =>
                {
                    b.Property<int>("MeasurementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeasurementID"));

                    b.Property<int?>("AQI")
                        .HasColumnType("int");

                    b.Property<double?>("CO")
                        .HasColumnType("float");

                    b.Property<double?>("NO2")
                        .HasColumnType("float");

                    b.Property<double?>("O3")
                        .HasColumnType("float");

                    b.Property<double?>("PM10")
                        .HasColumnType("float");

                    b.Property<double?>("PM2_5")
                        .HasColumnType("float");

                    b.Property<double?>("SO2")
                        .HasColumnType("float");

                    b.Property<string>("SensorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("MeasurementID");

                    b.HasIndex("SensorID");

                    b.ToTable("AirQualityData");
                });

            modelBuilder.Entity("SDTP_Project1.Models.AlertThresholdSetting", b =>
                {
                    b.Property<int>("ThresholdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThresholdId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("ThresholdValue")
                        .HasColumnType("real");

                    b.HasKey("ThresholdId");

                    b.ToTable("AlertThresholdSettings");
                });

            modelBuilder.Entity("SDTP_Project1.Models.MonitoringAdmin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AdminId");

                    b.ToTable("MonitoringAdmins");
                });

            modelBuilder.Entity("SDTP_Project1.Models.Sensor", b =>
                {
                    b.Property<string>("SensorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SensorID");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("SDTP_Project1.Models.SimulationConfiguration", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigId"));

                    b.Property<float>("BaselineCO")
                        .HasColumnType("real");

                    b.Property<float>("BaselineNO2")
                        .HasColumnType("real");

                    b.Property<float>("BaselineO3")
                        .HasColumnType("real");

                    b.Property<float>("BaselinePM10")
                        .HasColumnType("real");

                    b.Property<float>("BaselinePM2_5")
                        .HasColumnType("real");

                    b.Property<float>("BaselineSO2")
                        .HasColumnType("real");

                    b.Property<int>("FrequencyInSeconds")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("ConfigId");

                    b.ToTable("SimulationConfigurations");
                });

            modelBuilder.Entity("SDTP_Project1.Models.AirQualityData", b =>
                {
                    b.HasOne("SDTP_Project1.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });
#pragma warning restore 612, 618
        }
    }
}
